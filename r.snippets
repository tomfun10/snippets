#================================================================

snippet my.Utilities Pad out unequal length cols in list to data.frame
	Lst = ListToDataframe
	sapply(Lst,'[',seq(max(sapply(Lst,length))))

# Package Development 
snippet my.PckDev.Tips_ifPackageNotAvail 
	eg1 
	wants <- c("DescTools")
	has   <- wants %in% rownames(installed.packages())
	if(any(!has)) install.packages(wants[!has])

	eg2 
	if (!require("DT")) install.packages('DT')
	devtools::session_info('DT')

#---
snippet my.DB_myAzureTest_Data_base 
library(RODBC)

driver.name <- "{ODBC Driver 13 for SQL Server}"
db.name <- "sql2016"
server <- "sql-srv-2016.database.windows.net"
port <-"1433"
user.name <-"tom"
pwd <- "test2016SQL"

# Use a full connection string to connect to a SAMPLE database
con.text <- paste("DRIVER=",driver.name,
									";Database=",db.name,
									";server=",server,
									";Port=",port,
									";PROTOCOL=TCPIP",
									";UID=", user.name,
									";PWD=",pwd,sep="")

fto <- odbcDriverConnect(con.text)
sqlQuery(fto, "select * from test")

#---

snippet my.DB__FTReporting2_ODBC_direct 
library(RODBC) 

driver.name <- "{ODBC Driver 13 for SQL Server}"
db.name <- "FastTrackReporting"
server <- "emnu0fogx7.database.windows.net"
port <-"1433"
user.name <-"GRMS"
pwd <- "Password1"

# Use a full connection string to connect to Fast Track Reporting
con.text <- paste("DRIVER=",driver.name,
									";Database=",db.name,
									"server=",server,
									";PROTOCOL=TCPIP",
									";Port=",port,
									";UID=", user.name,
									";PWD=",pwd,sep="")

fto <- odbcDriverConnect(con.text)
sqlQuery(fto, "select * from track")

#---

snippet my.DB__FTReporting
	library(RODBC);
	sql= "
	
	"
	fto = odbcConnect("ODBC64_FTrack_2016",uid="GRMS",pwd="Password1");
	sql2 = gsub(sql,pattern = '\t|\n',replacement = ' ',ignore.case = TRUE );
	df = sqlQuery(fto,sql2 , stringsAsFactors=FALSE)
	
snippet my.DB__Read SQL to Console
	qry <- readLines('c:/delete_me/x.sql') ; qry 
	format(data.frame(qry),justify = "left") 
	
snippet my.DB__FTReporting_new_ODBC_driver
	library(odbc); library(dplyr); library(dbplyr)
	fto = dbConnect(odbc::odbc(), "ODBC64_FTrack_2016" ,uid="GRMS",pwd="Password1");
	
	sql= "
	select * from information_schema.tables
	"
	sql2 = gsub(sql,pattern = '\t|\n',replacement = ' ',ignore.case = TRUE );
	
	df= odbc::dbGetQuery(conn = fto, statement = sql2)
	
	odbc::dbDisconnect(fto)


snippet my.DB__lf_lf_Tbl
	lf_Tbl
snippet my.DB__lf_lf_View
	lf_View
snippet my.DB__lf_ColName
	lf_ColName
snippet my.DB__lf_lf_View
	lf_View
snippet my.DB__lf_lf_StoredProcs
	lf_StoredProcs 

snippet my.DB_CREATE PROCEDURE s
	# CREATE PROCEDURE s
	CREATE PROCEDURE s (@TableName Varchar(Max)) AS 
	Begin
	Begin Try
	DECLARE @Query Varchar(500)
	SET @Query = 'Select top 100 * From ' + @TableName
	EXEC (@Query)
	END TRY 

	BEGIN CATCH
	SELECT ERROR_MESSAGE() 
	END CATCH
	END 
snippet my.DB_CREATE PROCEDURE sc
	#CREATE PROCEDURE sc
	CREATE PROCEDURE sc (@TableName Varchar(Max), @TableColName  Varchar(Max))  AS
	Begin 
	Begin Try 
	DECLARE @Query Varchar(500) 
	SET @Query = 'Select distinct top 100 ' + @TableColName  + ' From ' + @TableName 
	EXEC (@Query)
	END TRY 

	BEGIN CATCH
	SELECT 	ERROR_MESSAGE() 
	END CATCH
	END
snippet my.DB_CREATE PROCEDURE lf_Tbl
	#CREATE procedure lf_Tbl
	#Query to fetch the list of table that match a pattern
	CREATE procedure lf_Tbl (@LookFor varchar(100)) as 
	begin 
	select * from information_schema.tables where upper(table_name) like upper('%'+ @LookFor +'%') 
	order by TABLE_NAME
	end 
snippet my.DB_CREATE PROCEDURE lf_View
	#CREATE procedure lf_View
	#Query to fetch the list of table that match a pattern
	CREATE procedure lf_View (@LookFor varchar(100)) as 
	begin 
	select * from information_schema.VIEWS where upper(table_name) like upper('%'+ @LookFor +'%')
	order by TABLE_NAME
	end 
snippet my.DB_CREATE PROCEDURE lf_ColName
	#CREATE procedure lf_ColName
	#Query to fetch the list of Columns (with table info) that match a pattern.
	CREATE procedure lf_ColName  (@LookFor varchar(100)) as 
	BEGIN
	select * from information_schema.columns where upper(column_name) like upper('%'+ @LookFor +'%')
	end 
snippet my.DB_CREATE PROCEDURE lf_StoredProcs
	#CREATE procedure lf_StoredProcs
	#Query to fetch the list of Stored Procedures that match a pattern.
	CREATE procedure lf_StoredProcs (@LookFor varchar(100)) as 
	Begin
	select ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_DEFINITION from INFORMATION_SCHEMA.ROUTINES
	where ROUTINE_TYPE='PROCEDURE' and routine_name like upper('%'+ @LookFor +'%')
	end 
	
#---
snippet my.CopyPaste_ClipBoardReadFrom
	dfx = read.table("clipboard",sep="\t",header=TRUE,stringsAsFactors=FALSE)
	tibble::as_tibble(dfx)

	str(dfx)
	summary(dfx)
	
snippet my.CopyPaste_ClipBoardReadFrom_ConvertDates_d/m/Y	
	dateFormats ="%d/%m/%Y"
	dfx = read.table("clipboard",sep="\t",header=TRUE,stringsAsFactors=FALSE)
	DatesNames = names(dfx[sapply(dfx, function(x) !all(is.na(as.Date(as.character(x),format=dateFormats))))])
	lapply(dfx[,DatesNames,drop=FALSE],as.Date,"%d/%m/%Y")      
	dfx[,DatesNames]=lapply(dfx[,DatesNames,drop=FALSE],as.Date,format=dateFormats)
	
	NumericCols = names(dfx[sapply(dfx, function(x) !all(is.na(as.numeric(x))))])
	lapply(dfx[,NumericCols,drop=FALSE],as.numeric)
	dfx[,NumericCols]=lapply(dfx[,NumericCols,drop=FALSE],as.numeric)
	
	tibble::as_tibble(dfx)

	str(dfx)
	summary(dfx)

snippet my.CopyPaste_ClipBoardWriteTo
	write.table(dfx,"clipboard",sep="\t",row.names=FALSE,col.names = TRUE)


snippet my.keyfiles_R_DailyEssentials
	H:\___My_Folders\0000 R Scripts\000 DailyEssentials 
	C:\Users\tlukacevic\Documents\.R\snippets\r.snippets
	
	http://www.brodrigues.co/functional_programming_and_unit_testing_for_data_munging/
	
snippet my.EDA_Find.This.Searched.Term.In.Columns
	#Find.This.Searched.Term.In.Columns
	lst = df
	Lk  = 'Look for this in all columns'
	Fnd=lapply( lst,function(x) x[grep(pattern = Lk,perl = FALSE,x[],ignore.case = TRUE)]);lapply(Fnd, unique) ->Fnd;Fnd[ sapply(Fnd, length) > 0 ]->Fnd.this.list_x
	Fnd.this.list_x
	sapply(Fnd.this.list_x,'[',seq(max(sapply(Fnd.this.list_x,length))))[,]

snippet my.EDA_Find.All.Uniq.Values.DBase.Columns
	#Find.All.Uniq.Values.DBase.Columns
	lst = df
	lstMax = 1000
	lst[sapply(lst,is.factor)]=sapply(lst[sapply(lst,is.factor)],as.character);lapply(lapply(lst,unique),head,lstMax)->Fnd.uniq.values.in.Columns
	Fnd.uniq.values.in.Columns
	sapply(Fnd.uniq.values.in.Columns,'[',seq(max(sapply(Fnd.uniq.values.in.Columns,length))))[,]

snippet my.DisplayUtil_scientificNotation_getRid
	options(scipen=999)

snippet my.XL.dataInterChange
	library(DescTools);library(RDCOMClient)
	
	#Read in one or many blocks of Excel cells, just select blocks of Excel cells run this function and they will be loaded to df
	df=DescTools::XLGetRange(header = TRUE)
	
	#Write a semi-colon delimited data block in R to Excel
	DescTools::XLView(df)

snippet my.ggplot2 seven_layers_grammar_of_graphics
	ggplot(data = <DATA>) + 
	<GEOM_FUNCTION>(
									mapping = aes(<MAPPINGS>),
									stat = <STAT>, 
									position = <POSITION>
	) +
	<COORDINATE_FUNCTION> +
	<FACET_FUNCTION>

snippet my.ggplot2 key attributes
	#Rotate Y axis 90 degrees
	theme(axis.text.x = element_text(angle=90,size = 7,vjust = 0, hjust = 1)) +
	
	#Finer date range on X axis
	scale_x_date(date_breaks = 'week', date_minor_breaks = 'day')
	#free scales on x and y axis
	facet_wrap(~variable,ncol=1, scales='free_y')

snippet my.copy.any.comma.sep.frame.into.windows
	df = read.table(file = 'clipboard',sep = '\t',header = TRUE, stringsAsFactors = FALSE)

snippet my.model.project.structure 
	library(tidyverse); library(DescTools);library(RODBC)

	# Generic Function to retrieve ft data
	getFT_Reporting <- function(FT_sql) {
	  fto = odbcConnect("ODBC64_FTrack_2016",uid="GRMS",pwd="Password1");
	  sql2 = gsub(FT_sql ,pattern = '\t|\n',replacement = ' ',ignore.case = TRUE );
	  return(sqlQuery(fto,sql2 , stringsAsFactors=FALSE))
	}
	
	# Generic Draw Plots Function 
	DrawPlot <- function(quotedPlotDefinition) {  eval(parse(text = quotedPlotDefinition))}
	
	# Create a List to hold all key reporting structures: SQLs , Data, plots 
	ft=list()
	
	ft[['sql']]     = list()
	ft[['data']]    = list()
	ft[['plots']]   = list()
	
	# SQL 
	ft[['sql']][['sql_track']]    = ' Select * from track'
	ft[['sql']][['sql_person']]   = ' Select top 100 * from Person'
	
	# Data
	ft[['data']][['data_track']]   = getFT_Reporting(ft$sql$sql_track)
	ft[['data']][['data_person']]  = getFT_Reporting(ft$sql$sql_person)
	
	# Write plot defintions for base plots 
	ft[['plots']][['track']]   = "plot(ft[['data']][['data_track']]$IsActive  ~  ft[['data']][['data_track']]$IsTier3Track)"
	ft[['plots']][['person']]  = "plot(ft[['data']][['data_person']]$MemberNumber ~ ft[['data']][['data_person']]$DateOfBirth)"
	
	# Write plot defintions for ggplots -- simpler treatment, ggplot is directly saved and accessible as a plot  
	ft[['plots']][['person2']] = 
	  ggplot(ft[['data']][['data_person']]) + 
	  geom_point(aes(MemberNumber , DateOfBirth))   
	  
	  
	# Draw plot defintions for base plots
	DrawPlot(ft[['plots']][['track']])
	DrawPlot(ft[['plots']][['person']])
	
	#or 
	ft[['plots']]$track    %>% DrawPlot()
	ft[['plots']]$person   %>% DrawPlot()
	
	#or 
	ft$plots$track         %>% DrawPlot()
	ft$plots$person        %>% DrawPlot()
	
	# Draw plot defintions for ggplots - Refer directly to plot  
	ft[['plots']][['person2']]

snippet my.Options_r 
	options(scipen = 100 )

snippet my.describe.data.variables 
	library(DescTools)
	
	Freq(iris$Sepal.Length 
	     ,useNA = 'always' 
	     ,breaks = c(-Inf,seq(1,10,by=0.5),Inf) 
	    ) -> xx ; xx
	
	Desc(iris$Sepal.Length
	     ,useNA = 'always'
	     ,breaks = c(-Inf,seq(1,10,by=0.5),Inf) 
	) -> xx ; xx
	
	# Write Level labels directly 
	xx$level = 1:21
	
	
	VectorSeq     = c(-Inf,seq(1,10,by=0.5),Inf)
	VectorSeqLab  = as.character(VectorSeq)
	VectorSeqLabLagged = Hmisc::Lag(VectorSeqLab , shift = 1)
	
	# Embryonic generate attractive labels 
	Lab = 
	  paste0(
	  VectorSeqLabLagged
	  ,'>='
	  ,VectorSeqLab
	  )  ; Lab

snippet my.plot.base.r.xAxis.dates 
	plot.new() 
	
	dateSeq1     = seq.Date(from = Sys.Date(),by = '6 days',length.out = 21)
	valuesToPlot = 1:length(dateSeq1) 
	
	plot.new()
	# svg(filename = 'd:/delete_me/x.svg')
	
	plot(
	  ,x=dateSeq1
	  ,y=valuesToPlot
	  ,xaxt="n"
	)
	axis.Date(
	  side = 1
	  ,las = 2
	  ,at=dateSeq1
	  ,format = '%a %d %b %Y'
	)

snippet my.iris.ir 
	ir=iris; names(ir)= c('sl' , 'sw' , 'pl' , 'pw' , 's')

#================================================================
